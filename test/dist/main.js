!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);const s=function(t,e,i){let s,n=null;return function(){let o=this,h=arguments,a=+new Date;clearTimeout(n),s||(s=a),a-s>=i?(t.apply(o,h),s=a):n=setTimeout(function(){t.apply(o,h)},e)}},n=(t=[],e=1)=>{let i="";return t.forEach((t,s)=>{let n="L";0===s&&(n="M"),t[2]&&(n=`Q${t[2][0]*e} ${t[2][1]*e}`),i+=`${n} ${t[0]*e} ${t[1]*e} `}),i};var o=class{constructor(t){this.x=t.x,this.y=t.y,this.lineWidth=t.lineWidth,this.width=t.width,this.height=t.height,this.opacity=t.opacity||.4,this.path=t.default&&t.default.data||[],this.onSure=t.onSure,this.canvas=null,this.ctx=null,this.div=null,this.mode=t.default&&t.default.mode||"free"}draw(){this.render(),"free"===this.mode?this.mode_free():"line"===this.mode&&this.mode_line()}render(){this.div=document.createElement("div"),this.div.innerHTML=`\n            <div id='SVGpath_wrap' style="position:absolute;top:${this.y}px;left:${this.x}px;width:${this.width}px;height:${this.height}px;background: rgba(0,0,0,${this.opacity});z-index: 1;">\n                <canvas id="SVGpath_Canvas" width=${this.width} height=${this.height}></canvas>\n                <div style="font-size:16px;padding: 4px;background: rgba(0,0,0,.4);border-radius: 4px;position: absolute;top: 10px;width: 95%;box-sizing: border-box;left: 0;right: 0;margin: auto;display: flex;justify-content: space-between;">\n                    <div id="optioncon" style="color:#FFFFFF">\n                        <input id="SVGpath_free" style="margin:0 4px;" type="radio" name="mode" value="free" ${"free"===this.mode?"checked":""} />free  \n                        <input id="SVGpath_line" style="margin:0 4px;" type="radio" name="mode" value="line" ${"line"===this.mode?"checked":""} />line\n                    </div>\n                    <div>\n                        <button style="border-radius:4px;border:0;color:#B2B2B2;background:rgba(0,0,0,.6);" id="SVGpath_cancel">cancel</button>\n                        <button style="border-radius:4px;border:0;color:#B2B2B2;background:rgba(0,0,0,.6);" id="SVGpath_sure">sure</button>\n                    </div>\n                </div>\n            </div>\n        `,document.body.appendChild(this.div),this.canvas=document.getElementById("SVGpath_Canvas"),this.ctx=this.canvas.getContext("2d"),document.getElementById("SVGpath_sure").onclick=(()=>{this.onSure({data:this.path,baseWidth:this.width,mode:this.mode}),document.body.removeChild(this.div)}),document.getElementById("SVGpath_cancel").onclick=(()=>{document.body.removeChild(this.div)}),document.getElementById("SVGpath_free").onclick=(()=>{this.cmode("free"),this.clear(),this.mode_free()}),document.getElementById("SVGpath_line").onclick=(()=>{this.cmode("line"),this.clear(),this.mode_line()})}mode_line(){let t=null,e=null;this.ctx.lineWidth=3;const i=(t,e)=>{let i={};return this.path.forEach((s,n)=>{let o=s[0],h=s[1];if(t<o+15&&t>o-15&&e<h+15&&e>h-15)i={index:n,type:"e"};else if(s[2]){const o=s[2][0],h=s[2][1];t<o+15&&t>o-15&&e<h+15&&e>h-15&&(i={index:n,type:"q"})}}),i},s=t=>{i(t.offsetX,t.offsetY).index?document.body.style.cursor="pointer":document.body.style.cursor="",null!==e&&(this.path[e][0]=t.offsetX,this.path[e][1]=t.offsetY,o())},n=e=>{i(e.offsetX,e.offsetY).index?document.body.style.cursor="pointer":document.body.style.cursor="",null!==t&&(this.path[t][2]=[e.offsetX,e.offsetY],o())},o=()=>{this.ctx.clearRect(0,0,this.width,this.height),this.ctx.beginPath();for(let t=0;t<this.path.length;t++)if(this.add_arc(this.path[t][0],this.path[t][1],5,0,2*Math.PI,!1,"orange"),this.ctx.moveTo(this.path[t][0],this.path[t][1]),this.ctx.save(),this.path[t+1]){let e=this.path[t+1][2][0],i=this.path[t+1][2][1];this.ctx.quadraticCurveTo(e,i,this.path[t+1][0],this.path[t+1][1]),this.ctx.stroke(),this.ctx.restore(),this.add_arc(e,i,5,0,2*Math.PI,!1,"gray"),this.ctx.setLineDash([2,2]),this.add_line(e,i,this.path[t][0],this.path[t][1]),this.add_line(e,i,this.path[t+1][0],this.path[t+1][1]),this.ctx.setLineDash([])}};o(),this.canvas.onmousedown=(h=>{const a=i(h.offsetX,h.offsetY);if("q"===a.type)return t=a.index,void(this.canvas.onmousemove=n);if("e"===a.type)return e=a.index,void(this.canvas.onmousemove=s);if(this.path.push([h.offsetX,h.offsetY]),this.path.length>1){let t=this.path.length,e=(h.offsetX+this.path[t-2][0])/2,i=(h.offsetY+this.path[t-2][1])/2;this.path[t-1].push([e,i])}o()}),this.canvas.onmousemove=null,this.canvas.onmouseup=(()=>{t=null,e=null}),this.canvas.mouseout=(()=>{t=null,e=null})}mode_free(){document.body.style.cursor="crosshair";let t=!1;this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.lineWidth=this.lineWidth||3;const e=()=>{this.ctx.beginPath();for(let t=0;t<this.path.length;t++)this.ctx.lineTo(this.path[t][0],this.path[t][1]);this.ctx.stroke()};this.ctx.strokeStyle="#ffffff",this.canvas.onmousedown=(e=>{t=!0,this.path.push([e.offsetX,e.offsetY])}),this.canvas.onmousemove=s(i=>{t&&(this.path.push([i.offsetX,i.offsetY]),this.ctx.clearRect(0,0,this.width,this.height),e())},50,60),this.canvas.onmouseup=(()=>t=!1),this.canvas.mouseout=(()=>t=!1),e()}add_arc(t,e,i,s,n,o,h){this.ctx.beginPath(),this.ctx.fillStyle=h,this.ctx.arc(t,e,i,s,n,o),this.ctx.fill(),this.ctx.lineWidth=1,this.ctx.stroke()}add_line(t,e,i,s){this.ctx.beginPath(),this.ctx.strokeStyle="#ffffff",this.ctx.moveTo(t,e),this.ctx.lineTo(i,s),this.ctx.stroke()}clear(){this.path=[],this.ctx.clearRect(0,0,this.width,this.height),this.canvas.onmousedown=null,this.canvas.onmousemove=null,this.canvas.onmouseup=null,this.canvas.mouseout=null}cmode(t){this.mode=t,document.body.style.cursor="free"===t?"crosshair":""}close(){try{document.body.removeChild(this.div),document.body.style.cursor=""}catch(t){console.warn("是不是已经关闭了？")}}};const{x:h,y:a,width:d,height:r}=document.getElementById("inner").getBoundingClientRect();let c=new o({x:h,y:a,width:d,height:r,opacity:.5,lineWidth:3,onSure:function(t){console.log(t),console.log(n(t.data)),document.getElementById("data").innerHTML=n(t.data)}});document.getElementById("start").onclick=(()=>c.draw())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,