!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);const s=function(t,e,i){let s,n=null;return function(){let h=this,o=arguments,a=+new Date;clearTimeout(n),s||(s=a),a-s>=i?(t.apply(h,o),s=a):n=setTimeout(function(){t.apply(h,o)},e)}},n=(t=[],e=1)=>{let i="";return t.forEach((t,s)=>{let n="L";0===s&&(n="M"),t[2]&&(n=`Q${t[2][0]*e} ${t[2][1]*e}`),i+=`${n} ${t[0]*e} ${t[1]*e} `}),i};var h=class{constructor(t){this.x=t.x,this.y=t.y,this.lineWidth=t.lineWidth,this.width=t.width,this.height=t.height,this.opacity=t.opacity||.8,this.path=t.default&&t.default.data||[],this.onSure=t.onSure,this.canvas=null,this.ctx=null,this.div=null,this.mode=t.default&&t.default.mode||"free"}draw(){this.render(),"free"===this.mode?this.mode_free():"line"===this.mode&&this.mode_line()}render(){this.div=document.createElement("div"),this.div.innerHTML=`\n            <div id='SVGpath_wrap' style="position:absolute;top:${this.y}px;left:${this.x}px;width:${this.width}px;height:${this.height}px;box-shadow: 0 0 10px #000;background: #fff;opacity:${this.opacity};border-radius: 4px;z-index: 1;">\n                <canvas id="SVGpath_Canvas" width=${this.width} height=${this.height}></canvas>\n                <div style="text-align: right;position: relative;top: -28px;padding: 0 8px;">\n                    <button id="SVGpath_cancel">cancel</button>\n                    <button id="SVGpath_sure">sure</button>\n                </div>\n                <div style="top: -28px;position: absolute;top: -12px;right: 0;">\n                    <button id="SVGpath_free">free mode</button>\n                    <button id="SVGpath_line">line mode</button>\n                </div>\n            </div>\n        `,document.body.appendChild(this.div),this.canvas=document.getElementById("SVGpath_Canvas"),this.ctx=this.canvas.getContext("2d"),document.getElementById("SVGpath_sure").onclick=(()=>{this.onSure({data:this.path,baseWidth:this.width,mode:this.mode}),document.body.removeChild(this.div)}),document.getElementById("SVGpath_cancel").onclick=(()=>{document.body.removeChild(this.div)}),document.getElementById("SVGpath_free").onclick=(()=>{this.cmode("free"),this.clear(),this.mode_free()}),document.getElementById("SVGpath_line").onclick=(()=>{this.cmode("line"),this.clear(),this.mode_line()})}mode_line(){let t=null,e=null;this.ctx.lineWidth=3;const i=(t,e)=>{let i={};return this.path.forEach((s,n)=>{let h=s[0],o=s[1];if(t<h+15&&t>h-15&&e<o+15&&e>o-15)i={index:n,type:"e"};else if(s[2]){const h=s[2][0],o=s[2][1];t<h+15&&t>h-15&&e<o+15&&e>o-15&&(i={index:n,type:"q"})}}),i},s=t=>{i(t.offsetX,t.offsetY).index?document.body.style.cursor="pointer":document.body.style.cursor="",null!==e&&(this.path[e][0]=t.offsetX,this.path[e][1]=t.offsetY,h())},n=e=>{i(e.offsetX,e.offsetY).index?document.body.style.cursor="pointer":document.body.style.cursor="",null!==t&&(this.path[t][2]=[e.offsetX,e.offsetY],h())},h=()=>{this.ctx.clearRect(0,0,this.width,this.height),this.ctx.beginPath();for(let t=0;t<this.path.length;t++)if(this.add_arc(this.path[t][0],this.path[t][1],5,0,2*Math.PI,!1,"orange"),this.ctx.moveTo(this.path[t][0],this.path[t][1]),this.ctx.save(),this.path[t+1]){let e=this.path[t+1][2][0],i=this.path[t+1][2][1];this.ctx.quadraticCurveTo(e,i,this.path[t+1][0],this.path[t+1][1]),this.ctx.stroke(),this.ctx.restore(),this.add_arc(e,i,5,0,2*Math.PI,!1,"gray"),this.ctx.setLineDash([2,2]),this.add_line(e,i,this.path[t][0],this.path[t][1]),this.add_line(e,i,this.path[t+1][0],this.path[t+1][1]),this.ctx.setLineDash([])}};h(),this.canvas.onmousedown=(o=>{const a=i(o.offsetX,o.offsetY);if("q"===a.type)return t=a.index,void(this.canvas.onmousemove=n);if("e"===a.type)return e=a.index,void(this.canvas.onmousemove=s);if(this.path.push([o.offsetX,o.offsetY]),this.path.length>1){let t=this.path.length,e=(o.offsetX+this.path[t-2][0])/2,i=(o.offsetY+this.path[t-2][1])/2;this.path[t-1].push([e,i])}h()}),this.canvas.onmousemove=null,this.canvas.onmouseup=(()=>{t=null,e=null}),this.canvas.mouseout=(()=>{t=null,e=null})}mode_free(){let t=!1;this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.lineWidth=this.lineWidth||5;const e=()=>{this.ctx.beginPath();for(let t=0;t<this.path.length;t++)this.ctx.lineTo(this.path[t][0],this.path[t][1]);this.ctx.stroke()};this.ctx.strokeStyle="#666666",this.canvas.onmousedown=(e=>{t=!0,this.path.push([e.offsetX,e.offsetY])}),this.canvas.onmousemove=s(i=>{t&&(this.path.push([i.offsetX,i.offsetY]),this.ctx.clearRect(0,0,this.width,this.height),e())},50,60),this.canvas.onmouseup=(()=>t=!1),this.canvas.mouseout=(()=>t=!1),e()}add_arc(t,e,i,s,n,h,o){this.ctx.beginPath(),this.ctx.fillStyle=o,this.ctx.arc(t,e,i,s,n,h),this.ctx.fill(),this.ctx.lineWidth=1,this.ctx.strokeStyle="black",this.ctx.stroke()}add_line(t,e,i,s){this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.lineTo(i,s),this.ctx.stroke()}clear(){this.path=[],this.ctx.clearRect(0,0,this.width,this.height),this.canvas.onmousedown=null,this.canvas.onmousemove=null,this.canvas.onmouseup=null,this.canvas.mouseout=null}cmode(t){this.mode=t}};const{x:o,y:a,width:l,height:d}=document.getElementById("inner").getBoundingClientRect();let c=new h({x:o,y:a,width:l,height:d,opacity:.5,lineWidth:3,onSure:function(t){console.log(t),console.log(n(t.data)),document.getElementById("data").innerHTML=n(t.data)}});document.getElementById("start").onclick=(()=>c.draw())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInRocm90dGxlIiwiZm4iLCJkZWxheSIsIm11c3RSdW5EZWxheSIsInRfc3RhcnQiLCJ0aW1lciIsImNvbnRleHQiLCJ0aGlzIiwiYXJncyIsImFyZ3VtZW50cyIsInRfY3VyciIsIkRhdGUiLCJjbGVhclRpbWVvdXQiLCJhcHBseSIsInNldFRpbWVvdXQiLCJwYXRoMnN0cmluZyIsImFycmF5IiwicmF0aW8iLCJzdHIiLCJmb3JFYWNoIiwiaXRlbSIsImluZGV4IiwiY2hyIiwiW29iamVjdCBPYmplY3RdIiwib3B0IiwieCIsInkiLCJsaW5lV2lkdGgiLCJ3aWR0aCIsImhlaWdodCIsIm9wYWNpdHkiLCJwYXRoIiwiZGVmYXVsdCIsImRhdGEiLCJvblN1cmUiLCJjYW52YXMiLCJjdHgiLCJkaXYiLCJyZW5kZXIiLCJtb2RlX2ZyZWUiLCJtb2RlX2xpbmUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJnZXRFbGVtZW50QnlJZCIsImdldENvbnRleHQiLCJvbmNsaWNrIiwiYmFzZVdpZHRoIiwicmVtb3ZlQ2hpbGQiLCJjbW9kZSIsImNsZWFyIiwiaXNEcmF3aW5nX2lkeCIsImlzRHJhd2luZ19lX2lkeCIsImZpbmRJZHgiLCJpZHgiLCJ0eCIsInR5IiwidHlwZSIsIml4IiwiaXkiLCJtb3ZlX2UiLCJlIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJzdHlsZSIsImN1cnNvciIsImRyYXdfbGluZXMiLCJtb3ZlX3EiLCJjbGVhclJlY3QiLCJiZWdpblBhdGgiLCJsZW5ndGgiLCJhZGRfYXJjIiwiTWF0aCIsIlBJIiwibW92ZVRvIiwic2F2ZSIsInF4IiwicXkiLCJxdWFkcmF0aWNDdXJ2ZVRvIiwic3Ryb2tlIiwicmVzdG9yZSIsInNldExpbmVEYXNoIiwiYWRkX2xpbmUiLCJvbm1vdXNlZG93biIsIm9ubW91c2Vtb3ZlIiwicHVzaCIsImxlbiIsIm9ubW91c2V1cCIsIm1vdXNlb3V0IiwiaXNEcmF3aW5nIiwibGluZUNhcCIsImxpbmVKb2luIiwiZHJhd0xpbmUiLCJsaW5lVG8iLCJzdHJva2VTdHlsZSIsInNhIiwiZWEiLCJjb3VudGVyY2xvY2t3aXNlIiwiY29sb3IiLCJmaWxsU3R5bGUiLCJhcmMiLCJmaWxsIiwic3giLCJzeSIsImV4IiwiZXkiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzdmciLCJyZXMiLCJjb25zb2xlIiwibG9nIiwiZHJhdyJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNB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QixJQUFBaUUsVUFBQUQsRUFDQTdGLEtBQUE2QixJQUFBa0UsSUFBQTdFLEVBQUFDLEVBQUE1QyxFQUFBbUgsRUFBQUMsRUFBQUMsR0FDQTVGLEtBQUE2QixJQUFBbUUsT0FDQWhHLEtBQUE2QixJQUFBVCxVQUFBLEVBQ0FwQixLQUFBNkIsSUFBQTRELFlBQUEsUUFDQXpGLEtBQUE2QixJQUFBNkMsU0FFQTFELFNBQUFpRixFQUFBQyxFQUFBQyxFQUFBQyxHQUNBcEcsS0FBQTZCLElBQUFtQyxZQUNBaEUsS0FBQTZCLElBQUF3QyxPQUFBNEIsRUFBQUMsR0FDQWxHLEtBQUE2QixJQUFBMkQsT0FBQVcsRUFBQUMsR0FDQXBHLEtBQUE2QixJQUFBNkMsU0FFQTFELFFBQ0FoQixLQUFBd0IsS0FBQSxHQUNBeEIsS0FBQTZCLElBQUFrQyxVQUFBLElBQUEvRCxLQUFBcUIsTUFBQXJCLEtBQUFzQixRQUNBdEIsS0FBQTRCLE9BQUFrRCxZQUFBLEtBQ0E5RSxLQUFBNEIsT0FBQW1ELFlBQUEsS0FDQS9FLEtBQUE0QixPQUFBc0QsVUFBQSxLQUNBbEYsS0FBQTRCLE9BQUF1RCxTQUFBLEtBRUFuRSxNQUFBcEMsR0FDQW9CLEtBQUFwQixTQ3ZOQSxNQUFBc0MsRUFBT0EsRUFBQUMsSUFBQUUsUUFBQUMsVUFBc0JZLFNBQUFLLGVBQUEsU0FBQThELHdCQUM3QixJQUFBQyxFQUFBLElBQWN4RixFQUFPLENBQ3JCSSxJQUNBQyxJQUNBRSxRQUNBQyxTQUNBQyxRQUFBLEdBQ0FILFVBQUEsRUFDQU8sT0FBQSxTQUFBNEUsR0FDQUMsUUFBQUMsSUFBQUYsR0FDQUMsUUFBQUMsSUFBb0JqRyxFQUFXK0YsRUFBQTdFLE9BQy9CUSxTQUFBSyxlQUFBLFFBQUFILFVBQW9ENUIsRUFBVytGLEVBQUE3RSxTQUcvRFEsU0FBQUssZUFBQSxTQUFBRSxRQUFBLEtBQUE2RCxFQUFBSSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiY2xhc3MgU1ZHcGF0aCB7XG4gICAgY29uc3RydWN0b3Iob3B0KSB7XG4gICAgICAgIHRoaXMueCA9IG9wdC54O1xuICAgICAgICB0aGlzLnkgPSBvcHQueTtcbiAgICAgICAgdGhpcy5saW5lV2lkdGggPSBvcHQubGluZVdpZHRoO1xuICAgICAgICB0aGlzLndpZHRoID0gb3B0LndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IG9wdC5oZWlnaHQ7XG4gICAgICAgIHRoaXMub3BhY2l0eSA9IG9wdC5vcGFjaXR5IHx8IDAuODtcbiAgICAgICAgdGhpcy5wYXRoID0gKG9wdC5kZWZhdWx0ICYmIG9wdC5kZWZhdWx0LmRhdGEpIHx8IFtdO1xuICAgICAgICB0aGlzLm9uU3VyZSA9IG9wdC5vblN1cmU7XG4gICAgICAgIHRoaXMuY2FudmFzID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdHggPSBudWxsO1xuICAgICAgICB0aGlzLmRpdiA9IG51bGw7XG4gICAgICAgIHRoaXMubW9kZSA9IChvcHQuZGVmYXVsdCAmJiBvcHQuZGVmYXVsdC5tb2RlKSB8fCAnZnJlZSc7XG4gICAgfVxuICAgIGRyYXcoKSB7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIGlmICh0aGlzLm1vZGUgPT09ICdmcmVlJykge1xuICAgICAgICAgICAgdGhpcy5tb2RlX2ZyZWUoKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1vZGUgPT09ICdsaW5lJykge1xuICAgICAgICAgICAgdGhpcy5tb2RlX2xpbmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuZGl2LmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgIDxkaXYgaWQ9J1NWR3BhdGhfd3JhcCcgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6JHt0aGlzLnl9cHg7bGVmdDoke3RoaXMueH1weDt3aWR0aDoke3RoaXMud2lkdGh9cHg7aGVpZ2h0OiR7XG4gICAgICAgICAgICB0aGlzLmhlaWdodFxuICAgICAgICAgICAgfXB4O2JveC1zaGFkb3c6IDAgMCAxMHB4ICMwMDA7YmFja2dyb3VuZDogI2ZmZjtvcGFjaXR5OiR7dGhpcy5vcGFjaXR5fTtib3JkZXItcmFkaXVzOiA0cHg7ei1pbmRleDogMTtcIj5cbiAgICAgICAgICAgICAgICA8Y2FudmFzIGlkPVwiU1ZHcGF0aF9DYW52YXNcIiB3aWR0aD0ke3RoaXMud2lkdGh9IGhlaWdodD0ke3RoaXMuaGVpZ2h0fT48L2NhbnZhcz5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwidGV4dC1hbGlnbjogcmlnaHQ7cG9zaXRpb246IHJlbGF0aXZlO3RvcDogLTI4cHg7cGFkZGluZzogMCA4cHg7XCI+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9XCJTVkdwYXRoX2NhbmNlbFwiPmNhbmNlbDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwiU1ZHcGF0aF9zdXJlXCI+c3VyZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJ0b3A6IC0yOHB4O3Bvc2l0aW9uOiBhYnNvbHV0ZTt0b3A6IC0xMnB4O3JpZ2h0OiAwO1wiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwiU1ZHcGF0aF9mcmVlXCI+ZnJlZSBtb2RlPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9XCJTVkdwYXRoX2xpbmVcIj5saW5lIG1vZGU8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZGl2KTtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnU1ZHcGF0aF9DYW52YXMnKTtcbiAgICAgICAgdGhpcy5jdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnU1ZHcGF0aF9zdXJlJykub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25TdXJlKHsgZGF0YTogdGhpcy5wYXRoLCBiYXNlV2lkdGg6IHRoaXMud2lkdGgsIG1vZGU6IHRoaXMubW9kZSB9KTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5kaXYpO1xuICAgICAgICB9O1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnU1ZHcGF0aF9jYW5jZWwnKS5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmRpdik7XG4gICAgICAgIH07XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdTVkdwYXRoX2ZyZWUnKS5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jbW9kZSgnZnJlZScpO1xuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAgICAgdGhpcy5tb2RlX2ZyZWUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ1NWR3BhdGhfbGluZScpLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNtb2RlKCdsaW5lJyk7XG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLm1vZGVfbGluZSgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBtb2RlX2xpbmUoKSB7XG4gICAgICAgIC8vIHHkuK3ngrkgICBl6LW354K5XG4gICAgICAgIGxldCBpc0RyYXdpbmdfaWR4ID0gbnVsbDtcbiAgICAgICAgbGV0IGlzRHJhd2luZ19lX2lkeCA9IG51bGxcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gMztcbiAgICAgICAgY29uc3QgZmluZElkeCA9ICh4LCB5KSA9PiB7XG4gICAgICAgICAgICBsZXQgaWR4ID0ge307XG4gICAgICAgICAgICB0aGlzLnBhdGguZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdHggPSBpdGVtWzBdXG4gICAgICAgICAgICAgICAgbGV0IHR5ID0gaXRlbVsxXVxuICAgICAgICAgICAgICAgIGlmICh4IDwgdHggKyAxNSAmJiB4ID4gdHggLSAxNSAmJiB5IDwgdHkgKyAxNSAmJiB5ID4gdHkgLSAxNSkge1xuICAgICAgICAgICAgICAgICAgICBpZHggPSB7IGluZGV4LCB0eXBlOiAnZScgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpeCA9IGl0ZW1bMl1bMF07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl5ID0gaXRlbVsyXVsxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHggPCBpeCArIDE1ICYmIHggPiBpeCAtIDE1ICYmIHkgPCBpeSArIDE1ICYmIHkgPiBpeSAtIDE1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZHggPSB7IGluZGV4LCB0eXBlOiAncScgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gaWR4O1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBtb3ZlX2UgPSBlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlkeCA9IGZpbmRJZHgoZS5vZmZzZXRYLCBlLm9mZnNldFkpOyAvLyDliKTmlq3pvKDmoIflnKjlk6rngrnkuIpcbiAgICAgICAgICAgIGlmIChpZHguaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0RyYXdpbmdfZV9pZHggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhdGhbaXNEcmF3aW5nX2VfaWR4XVswXSA9IGUub2Zmc2V0WFxuICAgICAgICAgICAgICAgIHRoaXMucGF0aFtpc0RyYXdpbmdfZV9pZHhdWzFdID0gZS5vZmZzZXRZXG4gICAgICAgICAgICAgICAgZHJhd19saW5lcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1vdmVfcSA9IGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgaWR4ID0gZmluZElkeChlLm9mZnNldFgsIGUub2Zmc2V0WSk7IC8vIOWIpOaWrem8oOagh+WcqOWTqueCueS4ilxuICAgICAgICAgICAgaWYgKGlkeC5pbmRleCkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzRHJhd2luZ19pZHggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhdGhbaXNEcmF3aW5nX2lkeF1bMl0gPSBbZS5vZmZzZXRYLCBlLm9mZnNldFldXG4gICAgICAgICAgICAgICAgZHJhd19saW5lcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRyYXdfbGluZXMgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIC8v5Y6f54K5XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRfYXJjKHRoaXMucGF0aFtpXVswXSwgdGhpcy5wYXRoW2ldWzFdLCA1LCAwLCAyICogTWF0aC5QSSwgZmFsc2UsICdvcmFuZ2UnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmN0eC5tb3ZlVG8odGhpcy5wYXRoW2ldWzBdLCB0aGlzLnBhdGhbaV1bMV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXRoW2kgKyAxXSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcXggPSB0aGlzLnBhdGhbaSArIDFdWzJdWzBdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcXkgPSB0aGlzLnBhdGhbaSArIDFdWzJdWzFdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHF4LCBxeSwgdGhpcy5wYXRoW2kgKyAxXVswXSwgdGhpcy5wYXRoW2kgKyAxXVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgICAgICAvL+S4reeCuVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkX2FyYyhxeCwgcXksIDUsIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSwgJ2dyYXknKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHguc2V0TGluZURhc2goWzIsIDJdKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRfbGluZShxeCwgcXksIHRoaXMucGF0aFtpXVswXSwgdGhpcy5wYXRoW2ldWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRfbGluZShxeCwgcXksIHRoaXMucGF0aFtpICsgMV1bMF0sIHRoaXMucGF0aFtpICsgMV1bMV0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5zZXRMaW5lRGFzaChbXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRyYXdfbGluZXMoKTtcbiAgICAgICAgdGhpcy5jYW52YXMub25tb3VzZWRvd24gPSBlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlkeCA9IGZpbmRJZHgoZS5vZmZzZXRYLCBlLm9mZnNldFkpO1xuICAgICAgICAgICAgaWYgKGlkeC50eXBlID09PSAncScpIHtcbiAgICAgICAgICAgICAgICBpc0RyYXdpbmdfaWR4ID0gaWR4LmluZGV4O1xuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLm9ubW91c2Vtb3ZlID0gbW92ZV9xXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlkeC50eXBlID09PSAnZScpIHtcbiAgICAgICAgICAgICAgICBpc0RyYXdpbmdfZV9pZHggPSBpZHguaW5kZXg7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMub25tb3VzZW1vdmUgPSBtb3ZlX2VcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnBhdGgucHVzaChbZS5vZmZzZXRYLCBlLm9mZnNldFldKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhdGgubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGxldCBsZW4gPSB0aGlzLnBhdGgubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGxldCBxeCA9IChlLm9mZnNldFggKyB0aGlzLnBhdGhbbGVuIC0gMl1bMF0pIC8gMjtcbiAgICAgICAgICAgICAgICBsZXQgcXkgPSAoZS5vZmZzZXRZICsgdGhpcy5wYXRoW2xlbiAtIDJdWzFdKSAvIDI7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXRoW2xlbiAtIDFdLnB1c2goW3F4LCBxeV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZHJhd19saW5lcygpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNhbnZhcy5vbm1vdXNlbW92ZSA9IG51bGxcbiAgICAgICAgdGhpcy5jYW52YXMub25tb3VzZXVwID0gKCkgPT4geyBpc0RyYXdpbmdfaWR4ID0gbnVsbDsgaXNEcmF3aW5nX2VfaWR4ID0gbnVsbCB9O1xuICAgICAgICB0aGlzLmNhbnZhcy5tb3VzZW91dCA9ICgpID0+IHsgaXNEcmF3aW5nX2lkeCA9IG51bGw7IGlzRHJhd2luZ19lX2lkeCA9IG51bGwgfTtcbiAgICB9XG4gICAgbW9kZV9mcmVlKCkge1xuICAgICAgICBsZXQgaXNEcmF3aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY3R4LmxpbmVDYXAgPSAncm91bmQnO1xuICAgICAgICB0aGlzLmN0eC5saW5lSm9pbiA9ICdyb3VuZCc7XG4gICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IHRoaXMubGluZVdpZHRoIHx8IDU7XG4gICAgICAgIGNvbnN0IGRyYXdMaW5lID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuY3R4LmxpbmVUbyh0aGlzLnBhdGhbaV1bMF0sIHRoaXMucGF0aFtpXVsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmN0eC5zdHJva2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSAnIzY2NjY2Nic7XG4gICAgICAgIHRoaXMuY2FudmFzLm9ubW91c2Vkb3duID0gZSA9PiB7XG4gICAgICAgICAgICBpc0RyYXdpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5wYXRoLnB1c2goW2Uub2Zmc2V0WCwgZS5vZmZzZXRZXSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2FudmFzLm9ubW91c2Vtb3ZlID0gdGhyb3R0bGUoXG4gICAgICAgICAgICBlID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzRHJhd2luZykgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRoaXMucGF0aC5wdXNoKFtlLm9mZnNldFgsIGUub2Zmc2V0WV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgZHJhd0xpbmUoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICA1MCxcbiAgICAgICAgICAgIDYwXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuY2FudmFzLm9ubW91c2V1cCA9ICgpID0+IChpc0RyYXdpbmcgPSBmYWxzZSk7XG4gICAgICAgIHRoaXMuY2FudmFzLm1vdXNlb3V0ID0gKCkgPT4gKGlzRHJhd2luZyA9IGZhbHNlKTtcbiAgICAgICAgZHJhd0xpbmUoKTtcbiAgICB9XG4gICAgYWRkX2FyYyh4LCB5LCByLCBzYSwgZWEsIGNvdW50ZXJjbG9ja3dpc2UsIGNvbG9yKSB7XG4gICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICAgICAgdGhpcy5jdHguYXJjKHgsIHksIHIsIHNhLCBlYSwgY291bnRlcmNsb2Nrd2lzZSk7XG4gICAgICAgIHRoaXMuY3R4LmZpbGwoKTtcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gMTtcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSAnYmxhY2snO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2UoKTtcbiAgICB9XG4gICAgYWRkX2xpbmUoc3gsIHN5LCBleCwgZXkpIHtcbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIHRoaXMuY3R4Lm1vdmVUbyhzeCwgc3kpO1xuICAgICAgICB0aGlzLmN0eC5saW5lVG8oZXgsIGV5KTtcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlKCk7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLnBhdGggPSBbXTtcbiAgICAgICAgdGhpcy5jdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5jYW52YXMub25tb3VzZWRvd24gPSBudWxsO1xuICAgICAgICB0aGlzLmNhbnZhcy5vbm1vdXNlbW92ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuY2FudmFzLm9ubW91c2V1cCA9IG51bGw7XG4gICAgICAgIHRoaXMuY2FudmFzLm1vdXNlb3V0ID0gbnVsbDtcbiAgICB9XG4gICAgY21vZGUobW9kZSkge1xuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICAgIH1cbn1cblxuLy/oioLmtYHlh73mlbDvvIzmraTlpITnlKjmnaXlv6vpgJ/nlLvnm7Tnur9cbmNvbnN0IHRocm90dGxlID0gZnVuY3Rpb24gKGZuLCBkZWxheSwgbXVzdFJ1bkRlbGF5KSB7XG4gICAgbGV0IHRpbWVyID0gbnVsbDtcbiAgICBsZXQgdF9zdGFydDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgY29udGV4dCA9IHRoaXMsXG4gICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgdF9jdXJyID0gK25ldyBEYXRlKCk7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgIGlmICghdF9zdGFydCkge1xuICAgICAgICAgICAgdF9zdGFydCA9IHRfY3VycjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodF9jdXJyIC0gdF9zdGFydCA+PSBtdXN0UnVuRGVsYXkpIHtcbiAgICAgICAgICAgIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgdF9zdGFydCA9IHRfY3VycjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZm4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuLy/lsIbkuoznu7TmlbDnu4TovaxzdmcgcGF0aOagvOW8j1xuY29uc3QgcGF0aDJzdHJpbmcgPSAoYXJyYXkgPSBbXSwgcmF0aW8gPSAxKSA9PiB7XG4gICAgbGV0IHN0ciA9ICcnO1xuICAgIGFycmF5LmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgIGxldCBjaHIgPSAnTCc7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgY2hyID0gJ00nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgICAgICBjaHIgPSBgUSR7aXRlbVsyXVswXSAqIHJhdGlvfSAke2l0ZW1bMl1bMV0gKiByYXRpb31gO1xuICAgICAgICB9XG4gICAgICAgIHN0ciArPSBgJHtjaHJ9ICR7aXRlbVswXSAqIHJhdGlvfSAke2l0ZW1bMV0gKiByYXRpb30gYDtcbiAgICB9KTtcbiAgICByZXR1cm4gc3RyO1xufTtcbmV4cG9ydCBkZWZhdWx0IFNWR3BhdGg7XG5leHBvcnQgeyBwYXRoMnN0cmluZyB9O1xuIiwiaW1wb3J0IFNWR3BhdGgsIHsgcGF0aDJzdHJpbmcgfSBmcm9tICcuLi9pbmRleCdcbmNvbnN0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lubmVyJykuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbmxldCBzdmcgPSBuZXcgU1ZHcGF0aCh7XG4gICAgeCxcbiAgICB5LFxuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBvcGFjaXR5OiAwLjUsXG4gICAgbGluZVdpZHRoOiAzLFxuICAgIG9uU3VyZTogZnVuY3Rpb24gKHJlcykge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXMpXG4gICAgICAgIGNvbnNvbGUubG9nKHBhdGgyc3RyaW5nKHJlcy5kYXRhKSlcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RhdGEnKS5pbm5lckhUTUwgPSBwYXRoMnN0cmluZyhyZXMuZGF0YSlcbiAgICB9XG59KVxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXJ0Jykub25jbGljayA9ICgpID0+IHN2Zy5kcmF3KCkiXSwic291cmNlUm9vdCI6IiJ9