!function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);const n=function(t,e,i){let n,s=null;return function(){let o=this,h=arguments,a=+new Date;clearTimeout(s),n||(n=a),a-n>=i?(t.apply(o,h),n=a):s=setTimeout(function(){t.apply(o,h)},e)}},s=(t=[],e=1)=>{let i="";return t.forEach((t,n)=>{let s="L";0===n&&(s="M"),i+=`${s}${t[0]*e} ${t[1]*e} `}),i};var o=class{constructor(t){this.x=t.x,this.y=t.y,this.lineWidth=t.lineWidth,this.width=t.width,this.height=t.height,this.opacity=t.opacity||.8,this.path=[],this.onSure=t.onSure,this.canvas=null,this.ctx=null,this.div=null,this.mode="free"}draw(){this.render(),this.mode_free()}render(){this.div=document.createElement("div"),this.div.innerHTML=`\n            <div id='SVGpath_wrap' style="position:absolute;top:${this.y}px;left:${this.x}px;width:${this.width}px;height:${this.height}px;box-shadow: 0 0 10px #000;background: #fff;opacity:${this.opacity};border-radius: 4px;z-index: 1;">\n                <canvas id="SVGpath_Canvas" width=${this.width} height=${this.height}></canvas>\n                <div style="text-align: right;position: relative;top: -28px;padding: 0 8px;">\n                    <button id="SVGpath_cancel">cancel</button>\n                    <button id="SVGpath_sure">sure</button>\n                </div>\n                <div style="top: -28px;position: absolute;top: -12px;right: 0;">\n                    <button id="SVGpath_free">free mode</button>\n                    <button id="SVGpath_line">line mode</button>\n                </div>\n            </div>\n        `,document.body.appendChild(this.div),this.canvas=document.getElementById("SVGpath_Canvas"),this.ctx=this.canvas.getContext("2d"),document.getElementById("SVGpath_sure").onclick=(()=>{this.onSure({data:this.path,baseWidth:this.width}),document.body.removeChild(this.div)}),document.getElementById("SVGpath_cancel").onclick=(()=>{document.body.removeChild(this.div)}),document.getElementById("SVGpath_free").onclick=(()=>{this.cmode("free"),this.clear(),this.mode_free()}),document.getElementById("SVGpath_line").onclick=(()=>{this.cmode("line"),this.clear(),this.mode_line()})}mode_line(){this.path=[];let t=[],e=null;this.ctx.lineWidth=3;const i=(e,i)=>{let n=null;return t.forEach((t,s)=>{const o=t[0],h=t[1];e<o+5&&e>o-5&&i<h+5&&i>h-5&&(n=s)}),n},s=()=>{this.ctx.beginPath();for(let e=0;e<this.path.length;e++)if(this.add_arc(this.path[e][0],this.path[e][1],5,0,2*Math.PI,!1,"orange"),this.ctx.moveTo(this.path[e][0],this.path[e][1]),this.path[e+1]){let i=t[e][0],n=t[e][1];this.ctx.quadraticCurveTo(i,n,this.path[e+1][0],this.path[e+1][1]),this.ctx.stroke(),this.add_arc(i,n,5,0,2*Math.PI,!1,"gray")}};this.canvas.onmousedown=(n=>{const o=i(n.offsetX,n.offsetY);if(null===o){if(this.path.push([n.offsetX,n.offsetY]),this.path.length>1){let e=this.path.length,i=(n.offsetX+this.path[e-2][0])/2,s=(n.offsetY+this.path[e-2][1])/2;t.push([i,s])}s()}else e=o}),this.canvas.onmousemove=n(n=>{const o=i(n.offsetX,n.offsetY);document.body.style.cursor=null!==o?"pointer":"default",null!==e&&(t.splice(e,1,[n.offsetX,n.offsetY]),this.ctx.clearRect(0,0,this.width,this.height),s())},70,80),this.canvas.onmouseup=(()=>e=null),this.canvas.mouseout=(()=>e=null)}mode_free(){this.path=[];let t=!1,e=0,i=0;this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.lineWidth=this.lineWidth||5,this.ctx.strokeStyle="#666666",this.canvas.onmousedown=(n=>{t=!0,[e,i]=[n.offsetX,n.offsetY],this.path.push([n.offsetX,n.offsetY])}),this.canvas.onmousemove=n(n=>{t&&(this.ctx.beginPath(),this.ctx.moveTo(e,i),this.ctx.lineTo(n.offsetX,n.offsetY),this.ctx.stroke(),[e,i]=[n.offsetX,n.offsetY],this.path.push([n.offsetX,n.offsetY]))},50,60),this.canvas.onmouseup=(()=>t=!1),this.canvas.mouseout=(()=>t=!1)}add_arc(t,e,i,n,s,o,h){this.ctx.beginPath(),this.ctx.fillStyle=h,this.ctx.arc(t,e,i,n,s,o),this.ctx.fill(),this.ctx.lineWidth=1,this.ctx.strokeStyle="black",this.ctx.stroke()}clear(){this.path=[],this.ctx.clearRect(0,0,this.width,this.height),this.canvas.onmousedown=null,this.canvas.onmousemove=null,this.canvas.onmouseup=null,this.canvas.mouseout=null}cmode(t){this.mode=t}};const{x:h,y:a,width:l,height:c}=document.getElementById("inner").getBoundingClientRect();let d=new o({x:h,y:a,width:l,height:c,opacity:.5,lineWidth:3,onSure:function(t){console.log(t),console.log(s(t.data)),document.getElementById("data").innerHTML=s(t.data)}});document.getElementById("start").onclick=(()=>d.draw())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,