!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);const s=function(t,e,i){let s,n=null;return function(){let h=this,o=arguments,a=+new Date;clearTimeout(n),s||(s=a),a-s>=i?(t.apply(h,o),s=a):n=setTimeout(function(){t.apply(h,o)},e)}},n=(t=[],e=1)=>{let i="";return t.forEach((t,s)=>{let n="L";0===s&&(n="M"),t[2]&&(n=`Q${t[2][0]*e} ${t[2][1]*e}`),i+=`${n} ${t[0]*e} ${t[1]*e} `}),i};var h=class{constructor(t){this.x=t.x,this.y=t.y,this.lineWidth=t.lineWidth,this.width=t.width,this.height=t.height,this.opacity=t.opacity||.8,this.path=[],this.onSure=t.onSure,this.canvas=null,this.ctx=null,this.div=null,this.mode="free"}draw(){this.render(),this.mode_free()}render(){this.div=document.createElement("div"),this.div.innerHTML=`\n            <div id='SVGpath_wrap' style="position:absolute;top:${this.y}px;left:${this.x}px;width:${this.width}px;height:${this.height}px;box-shadow: 0 0 10px #000;background: #fff;opacity:${this.opacity};border-radius: 4px;z-index: 1;">\n                <canvas id="SVGpath_Canvas" width=${this.width} height=${this.height}></canvas>\n                <div style="text-align: right;position: relative;top: -28px;padding: 0 8px;">\n                    <button id="SVGpath_cancel">cancel</button>\n                    <button id="SVGpath_sure">sure</button>\n                </div>\n                <div style="top: -28px;position: absolute;top: -12px;right: 0;">\n                    <button id="SVGpath_free">free mode</button>\n                    <button id="SVGpath_line">line mode</button>\n                </div>\n            </div>\n        `,document.body.appendChild(this.div),this.canvas=document.getElementById("SVGpath_Canvas"),this.ctx=this.canvas.getContext("2d"),document.getElementById("SVGpath_sure").onclick=(()=>{this.onSure({data:this.path,baseWidth:this.width}),document.body.removeChild(this.div)}),document.getElementById("SVGpath_cancel").onclick=(()=>{document.body.removeChild(this.div)}),document.getElementById("SVGpath_free").onclick=(()=>{this.cmode("free"),this.clear(),this.mode_free()}),document.getElementById("SVGpath_line").onclick=(()=>{this.cmode("line"),this.clear(),this.mode_line()})}mode_line(){this.path=[];let t=null;this.ctx.lineWidth=3;const e=(t,e)=>{let i=null;return this.path.forEach((s,n)=>{if(!s[2])return;const h=s[2][0],o=s[2][1];t<h+5&&t>h-5&&e<o+5&&e>o-5&&(i=n)}),i},i=()=>{this.ctx.beginPath();for(let t=0;t<this.path.length;t++)if(this.add_arc(this.path[t][0],this.path[t][1],5,0,2*Math.PI,!1,"orange"),this.ctx.moveTo(this.path[t][0],this.path[t][1]),this.ctx.save(),this.path[t+1]){let e=this.path[t+1][2][0],i=this.path[t+1][2][1];this.ctx.quadraticCurveTo(e,i,this.path[t+1][0],this.path[t+1][1]),this.ctx.stroke(),this.ctx.restore(),this.add_arc(e,i,5,0,2*Math.PI,!1,"gray"),this.ctx.setLineDash([2,2]),this.add_line(e,i,this.path[t][0],this.path[t][1]),this.add_line(e,i,this.path[t+1][0],this.path[t+1][1]),this.ctx.setLineDash([])}};this.canvas.onmousedown=(s=>{const n=e(s.offsetX,s.offsetY);if(null===n){if(this.path.push([s.offsetX,s.offsetY]),this.path.length>1){let t=this.path.length,e=(s.offsetX+this.path[t-2][0])/2,i=(s.offsetY+this.path[t-2][1])/2;this.path[t-1].push([e,i])}i()}else t=n}),this.canvas.onmousemove=s(s=>{const n=e(s.offsetX,s.offsetY);document.body.style.cursor=null!==n?"pointer":"default",null!==t&&(this.path[t].splice(2,1,[s.offsetX,s.offsetY]),this.ctx.clearRect(0,0,this.width,this.height),i())},70,80),this.canvas.onmouseup=(()=>t=null),this.canvas.mouseout=(()=>t=null)}mode_free(){this.path=[];let t=!1,e=0,i=0;this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.lineWidth=this.lineWidth||5,this.ctx.strokeStyle="#666666",this.canvas.onmousedown=(s=>{t=!0,[e,i]=[s.offsetX,s.offsetY],this.path.push([s.offsetX,s.offsetY])}),this.canvas.onmousemove=s(s=>{t&&(this.ctx.beginPath(),this.ctx.moveTo(e,i),this.ctx.lineTo(s.offsetX,s.offsetY),this.ctx.stroke(),[e,i]=[s.offsetX,s.offsetY],this.path.push([s.offsetX,s.offsetY]))},50,60),this.canvas.onmouseup=(()=>t=!1),this.canvas.mouseout=(()=>t=!1)}add_arc(t,e,i,s,n,h,o){this.ctx.beginPath(),this.ctx.fillStyle=o,this.ctx.arc(t,e,i,s,n,h),this.ctx.fill(),this.ctx.lineWidth=1,this.ctx.strokeStyle="black",this.ctx.stroke()}add_line(t,e,i,s){this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.lineTo(i,s),this.ctx.stroke()}clear(){this.path=[],this.ctx.clearRect(0,0,this.width,this.height),this.canvas.onmousedown=null,this.canvas.onmousemove=null,this.canvas.onmouseup=null,this.canvas.mouseout=null}cmode(t){this.mode=t}};const{x:o,y:a,width:c,height:l}=document.getElementById("inner").getBoundingClientRect();let d=new h({x:o,y:a,width:c,height:l,opacity:.5,lineWidth:3,onSure:function(t){console.log(t),console.log(n(t.data)),document.getElementById("data").innerHTML=n(t.data)}});document.getElementById("start").onclick=(()=>d.draw())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,