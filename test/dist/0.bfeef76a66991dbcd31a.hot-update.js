webpackHotUpdate(0,[function(t,e,i){"use strict";i.r(e);const n=function(t,e,i){let n,o=null;return function(){let h=this,s=arguments,d=+new Date;clearTimeout(o),n||(n=d),d-n>=i?(t.apply(h,s),n=d):o=setTimeout(function(){t.apply(h,s)},e)}};var o=class{constructor(t){this.x=t.x,this.y=t.y,this.lineWidth=t.lineWidth,this.width=t.width,this.height=t.height,this.opacity=t.opacity||.8,this.path=[[0,0]],this.onSure=t.onSure}draw(){this.path=[];let t=!1,e=0,i=0;const o=document.createElement("div");o.innerHTML=`\n        <div id='SVGpath_wrap' style="position:absolute;top:${this.y}px;left:${this.x}px;width:${this.width}px;height:${this.height}px;box-shadow: 0 0 10px #000;background: #fff;opacity:${this.opacity};border-radius: 4px;z-index: 1;">\n            <canvas id="SVGpath_Canvas" width=${this.width} height=${this.height}></canvas>\n            <div style="text-align: right;position: relative;top: -28px;padding: 0 8px;">\n                <button id="SVGpath_cancel">取消</button>\n                <button id="SVGpath_sure">确定</button>\n            </div>\n        </div>\n    `,document.body.appendChild(o);const h=document.getElementById("SVGpath_Canvas"),s=h.getContext("2d");s.strokeStyle="#666666",h.addEventListener("mousedown",n=>{t=!0,[e,i]=[n.offsetX,n.offsetY],this.path.push([n.offsetX,n.offsetY])}),h.addEventListener("mousemove",n(n=>{t&&(s.beginPath(),s.lineWidth=this.lineWidth||5,s.moveTo(e,i),s.lineTo(n.offsetX,n.offsetY),s.stroke(),[e,i]=[n.offsetX,n.offsetY],this.path.push([n.offsetX,n.offsetY]))},50,60)),h.addEventListener("mouseup",()=>t=!1),h.addEventListener("mouseout",()=>t=!1),document.getElementById("SVGpath_sure").onclick=(()=>{this.onSure({data:this.path,baseWidth:this.width}),document.body.removeChild(o)}),document.getElementById("SVGpath_cancel").onclick=(()=>{document.body.removeChild(o)})}};const{x:h,y:s,width:d,height:a}=document.getElementById("inner").getBoundingClientRect();let c=new o({x:h,y:s,width:d,height:a,opacity:.5,lineWidth:3,onSure:function(t){console.log(t),console.log(((t=[],e=1)=>{let i="";return t.forEach((t,n)=>{let o="L";0===n&&(o="M"),i+=`${o}${t[0]*e} ${t[1]*e} `}),i})(t.data))}});document.getElementById("start").onclick=(()=>c.draw())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,